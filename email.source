---------------------------------------------------------------------------
--
-- complex.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
--
--
-- Portions Copyright (c) 1996-2013, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- src/tutorial/complex.source
--
---------------------------------------------------------------------------

-----------------------------
-- Creating a new type:
--	We are going to create a new type called 'complex' which represents
--	complex numbers.
--	A user-defined type must have an input and an output function, and
--	optionally can have binary input and output functions.  All of these
--	are usually user-defined C functions.
-----------------------------

-- Assume the user defined functions are in _OBJWD_/complex$DLSUFFIX
-- (we do not want to assume this is in the dynamic loader search path).
-- Look at $PWD/complex.c for the source.  Note that we declare all of
-- them as STRICT, so we do not need to cope with NULL inputs in the
-- C code.  We also mark them IMMUTABLE, since they always return the
-- same outputs given the same inputs.

-- the input function 'complex_in' takes a null-terminated string (the
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 'complex'
-- does not exist yet but that's okay.

CREATE FUNCTION email_in(cstring)
   RETURNS EmailAddress
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'complex_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION email_out(EmailAddress)
   RETURNS cstring
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary input function 'complex_recv' takes a StringInfo buffer
-- and turns its contents into the internal representation.

CREATE FUNCTION email_recv(internal)
   RETURNS EmailAddress
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary output function 'complex_send' takes the internal representation
-- and converts it into a (hopefully) platform-independent bytea string.

CREATE FUNCTION email_send(EmailAddress)
   RETURNS bytea
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;


-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type (we need two 8-byte doubles).

CREATE TYPE EmailAddress (
   input = email_in,
   output = email_out,
   receive = email_recv,
   send = email_send
);


-----------------------------
-- Using the new type:
--	user-defined types can be used like ordinary built-in types.
-----------------------------

-- eg. we can use it in a table

CREATE TABLE test_email ( 
   x  EmailAddress,
   y  EmailAddress
);

-- data for user-defined types are just strings in the proper textual
-- representation.

INSERT INTO test_email VALUES ('hello@world.com', 'This77@theRe.net');


INSERT INTO test_email VALUES ('jas@cse.unsw.edu.au', 'john-shepherd@hotmail.com');
INSERT INTO test_email VALUES ('john.a.shepherd@gmail.com', 'J.Shepherd@unsw.edu.au');
INSERT INTO test_email VALUES ('j.a.shepherd@acm.org', 'j-a-shepherd@bargain-hunter.com');
INSERT INTO test_email VALUES ('jas@a-very-silly-domain.org', 'john1988@my-favourite.org');
INSERT INTO test_email VALUES ('x-1@gmail.com', 'a@b.com');
INSERT INTO test_email VALUES ('joe@cse.unsw.edu.au', 'bob@hotmail.com');
INSERT INTO test_email VALUES ('joe@cse.UNSW.edu.au', 'bob@hotmail.COM');

SELECT * FROM test_email;

-----------------------------
-- Creating an operator for the new type:
--	Let's define an add operator for complex types. Since POSTGRES
--	supports function overloading, we'll use + as the add operator.
--	(Operator names can be reused with different numbers and types of
--	arguments.)
-----------------------------



-----------------------------
-- Interfacing New Types with Indexes:
--	We cannot define a secondary index (eg. a B-tree) over the new type
--	yet. We need to create all the required operators and support
--      functions, then we can make the operator class.
-----------------------------

-- first, define the required operators
CREATE FUNCTION email_lt(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_le(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_eq(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_ne(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_ge(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_gt(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_de(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_dne(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR < (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_lt,
   commutator = > , negator = >= ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR <= (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_le,
   commutator = >= , negator = > ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR = (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_eq,
   commutator = = , negator = <>,
   -- leave out negator since we didn't create <> operator
   -- negator = <> ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR >= (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_ge,
   commutator = <= , negator = < ,
   restrict = scalargtsel, join = scalargtjoinsel
);
CREATE OPERATOR > (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_gt,
   commutator = < , negator = <= ,
   restrict = scalargtsel, join = scalargtjoinsel
);

CREATE OPERATOR <> (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_ne,
   commutator = <> , negator = = ,
   restrict = neqsel, join = neqjoinsel
);

CREATE OPERATOR ~ (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_de,
   commutator = ~ , negator = !~,
   restrict = eqsel, join = eqjoinsel
);

CREATE OPERATOR !~ (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_dne,
   commutator = !~ , negator = ~,
   restrict = neqsel, join = neqjoinsel
);


-- create the support function too
CREATE FUNCTION email_cmp(EmailAddress, EmailAddress) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

-- now we can make the operator class
CREATE OPERATOR CLASS email_ops
    DEFAULT FOR TYPE EmailAddress USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       email_cmp(EmailAddress, EmailAddress);


-- now, we can define a btree index on complex types. First, let's populate
-- the table. Note that postgres needs many more tuples to start using the
-- btree index during selects.


CREATE INDEX test_eml_ind ON test_email
   USING btree(x email_ops);

SELECT * from test_email where x = 'jas@cse.unsw.edu.au';
SELECT * from test_email where x < 'jas@cse.unsw.edu.au';
SELECT * from test_email where x > 'jas@cse.unsw.edu.au';
SELECT * from test_email where x >= 'jas@cse.unsw.edu.au';
SELECT * from test_email where x <= 'jas@cse.unsw.edu.au';
SELECT * from test_email where x <> 'jas@cse.unsw.edu.au';
SELECT * from test_email where x ~ 'jas@cse.unsw.edu.au';
SELECT * from test_email where x !~ 'jas@cse.unsw.edu.au';

-- clean up the example
--DROP TABLE test_email;
--DROP TYPE EmailAddress CASCADE;
